// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    And16(a=x, b=notX, out=zero);

    // Zero the x
    Not16(in=x, out=notX);
    Mux16(
    a=x,
    b=zero,
    sel=zx,
    out=x1
    );

    // Negate x
    Not16(in=x1, out=notX1);
    Mux16(
    a=x1,
    b=notX1,
    sel=nx,
    out=finalX
    );

    // Do not negate if x is zero


    // Zero the y
    Not16(in=y, out=notY);
    Mux16(a=y, b=zero, sel=zy, out=y1);

    // Negate y
    Not16(in=y1, out=notY1);
    Mux16(a=y1, b=notY1, sel=ny, out=finalY);


    // Check for f to see which output to take
    Add16(a=finalX, b=finalY, out=outSum);
    And16(a=finalX, b=finalY, out=outAnd);

    Mux16(a=outAnd, b=outSum, sel=f, out=out1);
    Not16(in=out1, out=notOut1);

    Mux16(
    a=out1,
    b=notOut1,
    sel=no,
    out=out,
    out[15]=ng,
    out[15]=out15,
    out[14]=out14,
    out[13]=out13,
    out[12]=out12,
    out[11]=out11,
    out[10]=out10,
    out[9]=out9,
    out[8]=out8,
    out[7]=out7,
    out[6]=out6,
    out[5]=out5,
    out[4]=out4,
    out[3]=out3,
    out[2]=out2,
    out[1]=out1A,
    out[0]=out0
    );

    Or(a=out15, b=out14, out=outA);
    Or(a=outA, b=out13, out=outB);
    Or(a=outB, b=out12, out=outC);
    Or(a=outC, b=out11, out=outD);
    Or(a=outD, b=out10, out=outE);
    Or(a=outE, b=out9, out=outF);
    Or(a=outF, b=out8, out=outG);
    Or(a=outG, b=out7, out=outH);
    Or(a=outH, b=out6, out=outI);
    Or(a=outI, b=out5, out=outJ);
    Or(a=outJ, b=out4, out=outK);
    Or(a=outK, b=out3, out=outL);
    Or(a=outL, b=out2, out=outM);
    Or(a=outM, b=out1A, out=outN);
    Or(a=outN, b=out0, out=outO);

    Not(in=outO, out=zr);
}
